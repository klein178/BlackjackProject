/**
 * LiarClient.java
 *
 * This program implements a interface for playing Liars Dice.
 *
 * Liars Dice is played where every player rolls 5 dice, with the values known only to the player who rolled.
 * The Players then take turns guessing how many of a face of the die is present in all the die combined,
 * including the dice of the other players, which are unknown values. The next player can either claim that there is
 * a higher number of die, or keep the number the same and increase the number of the face of the die.
 * For example, Player 1 says "four 5s"; Player 2 can either say "five 5s, (or any number greater than 5)", or
 * "four 6s"
 * If the player thinks the previous player is wrong/lying, they can call their bluff and if they are right, the first
 * player loses a die. If the they are wrong, than the person calling the bluff loses a die.
 *
 * The game continues until only one player has die left.
 *
 * Authors: Jed Klein and Connor Ford
 *
 * Data received is sent to the output screen, so it is possible that as
 * a user is typing in information a message from the server will be
 * inserted.
 *
 */
import java.net.Socket;
import java.io.DataOutputStream;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.IOException;
import java.util.Scanner;
import java.util.Random;

public class LiarClient
{

	public static void main(String[] args)
	{
		int bet1 = 0;
		int bet2 = 0;
		try
		{
			String hostname = "localhost";
			int port = 7654;

			System.out.println("Connecting to server on port " + port);
			Socket connectionSock = new Socket(hostname, port);

			DataOutputStream serverOutput = new DataOutputStream(connectionSock.getOutputStream());

			System.out.println("Connection made.");

			// Start a thread to listen and display data sent by the server
			LiarClientListener listener = new LiarClientListener(connectionSock);
			Thread theThread = new Thread(listener);
			theThread.start();

			// Read input from the keyboard and send it to everyone else.
			// The only way to quit is to hit control-c, but a quit command
			// could easily be added.

			Scanner keyboard = new Scanner(System.in);
			int playerRoll[] = new int[5];
			int playersDieCount = 5;

			for (int i = 0; i < playerRoll.length; ++i)
			{
				Random ran = new Random();
				playerRoll[i] = ran.nextInt(6) +1;
			}

			System.out.println("Your roll is: " + playerRoll[0] + ", " + playerRoll[1] + ", " + playerRoll[2] + ", " + playerRoll[3] + ", " + playerRoll[4]);

			while (true)
			{
				String data = keyboard.nextLine();
				String[] str = data.split(",");
				int diQuant = Integer.parseInt(str[0]);
				int diFace = Integer.parseInt(str[1]);
				if (diQuant > bet1 && diFace >= bet2)
				{
					bet1 = diQuant;
					bet2 = diFace;
					serverOutput.writeBytes(data + "\n");
				}
			
				else if (diQuant == bet1 && diFace > bet2)
				{
					bet1 = diQuant;
					bet2 = diFace;
					serverOutput.writeBytes(data + "\n");
				}
				else if (diQuant ==0 && diFace ==0)
				{
					bet1 = 0;
					bet2 = 0;
				}

				else
				{
					System.out.println("Must increase die number or keep die number and increase the face value.\n");
				} 
			}
		}
		catch (IOException e)
		{
			System.out.println(e.getMessage());
		}
	}
} // LiarClient
